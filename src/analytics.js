const HttpsProxyAgent = require('https-proxy-agent');
const google = require('googleapis');
const key = require('../auth/nodeAnalytics-b11967f9e384.json');
const programs = require('../auth/program_mapping.json');

const proxy = 'http://proxy.whu.edu:3128';
const agent = new HttpsProxyAgent(proxy);
const VIEW_ID = 'ga:134328552';

// Define Google Client with JSON Auth File generated by Google Developer Console
const jwtClient = new google.auth.JWT(
  key.client_email,
  null,
  key.private_key,
  ['https://www.googleapis.com/auth/analytics.readonly'],
);

// Return the page titles from program mapping object
const matchProgram = (program) => {
  let pagetitles = [];
  for (let x = 0; x < programs.length; x += 1) {
    if (programs[x].id === program) {
      ({ pagetitles } = programs[x]);
    }
  }
  return pagetitles;
};

// Extract relevant data from query results
const extractProgramData = (data, program, cb) => {
  const match = matchProgram(program);
  let result = 0;
  for (let x = 0; x < data.rows.length; x += 1) {
    for (let y = 0; y < match.length; y += 1) {
      if (data.rows[x][0] === match[y]) {
        result += Number(data.rows[x][1]);
      }
    }
  }
  cb(result);
};

// Define Query to Analytics
const queryData = (analytics, program, cb) => {
  analytics.data.ga.get({
    auth: jwtClient,
    ids: VIEW_ID,
    metrics: 'ga:pageviews',
    dimensions: 'ga:pageTitle',
    'start-date': '7daysAgo',
    'end-date': 'yesterday',
    sort: '-ga:pageviews',
    maxresults: 100,
  }, (err, response) => {
    if (err) {
      return err;
    }
    return extractProgramData(response, program, cb);
  });
};

// Export function that invoces authorization and performs the query
exports.getData = (program, cb) => {
  google.options({ proxy, agent });
  jwtClient.authorize((err) => {
    if (err) {
      return err;
    }
    const analytics = google.analytics('v3');
    return queryData(analytics, program, cb);
  });
};
